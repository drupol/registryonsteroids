<?php

/**
 * @file
 * Main module file.
 */

global $conf;

// Auto-rebuild the theme registry.
if (variable_get('registryonsteroids_rebuild_registry', FALSE) && !defined('MAINTENANCE_MODE')) {
  // Rebuild .info data.
  system_rebuild_theme_data();
  // Rebuild theme registry.
  drupal_theme_rebuild();
}

$conf['theme_debug'] = variable_get('registryonsteroids_theme_debug', FALSE);

/**
 * Implements hook_menu().
 */
function registryonsteroids_menu() {
  return array(
    'admin/config/development/registryonsteroids' => array(
      'title' => 'Registry On Steroïds',
      'description' => 'Registry On Steroïds configuration',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('_registryonsteroids_admin_settings'),
      'access arguments' => array(
        'administer site',
      ),
      'file' => 'registryonsteroids.admin.inc',
    ),
  );
}

/**
 * Implements hook_module_implements_alter().
 */
function registryonsteroids_module_implements_alter(array &$implementations, $hook) {
  if ('theme_registry_alter' === $hook) {
    $group = $implementations['registryonsteroids'];
    unset($implementations['registryonsteroids']);
    $implementations['registryonsteroids'] = $group;
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function registryonsteroids_theme_registry_alter(array &$registry) {
  // Figure out which theme this applies to.
  if (PHP_VERSION_ID >= 50400) {
    $trace = debug_backtrace(0, 3);
  }
  else {
    // Second parameter not supported in PHP < 5.4.0. It would cause a
    // "Warning: debug_backtrace() expects at most 1 parameter, 2 given".
    $trace = debug_backtrace(0);
  }
  if (!isset($trace[2]['function'], $trace[2]['args'][0]) || '_theme_build_registry' !== $trace[2]['function']) {
    watchdog(
      'registryonsteroids',
      'hook_theme_registry_alter() was called from an unexpected place. We cannot determine which theme this registry belongs to. registryonsteroids functionality might not work.',
      array(),
      WATCHDOG_WARNING
    );

    return;
  }

  /* @see _theme_build_registry() */
  list($theme, $base_themes) = $trace[2]['args'];

  // Apply Registry On Steroids sauce.
  _registryonsteroids_theme_registry_alter($registry, $base_themes, $theme);
}

/**
 * Registry post process mechanism.
 *
 * @param array[] $registry
 *   The registry.
 * @param object[] $base_themes
 *   The base themes.
 * @param object $theme
 *   The current theme.
 */
function _registryonsteroids_theme_registry_alter(array &$registry, array $base_themes, $theme) {

  /**
   * @var string[][] $prefixes_by_type
   *   Format: $[$prefix_type][$prefix] = $prefix
   */
  $prefixes_by_type = _registryonsteroids_theme_make_prefixes($base_themes, $theme);

  /**
   * @var string[] $prefixes
   *   Format: $[$prefix] = $prefix
   */
  $prefixes = array_merge($prefixes_by_type['module'], $prefixes_by_type['theme_engine'], $prefixes_by_type['base_theme'], $prefixes_by_type['theme']);

  /**
   * @var string[][] $functions_by_first_fragment
   *   Format: $[$first_fragment][] = $function
   */
  $functions_by_first_fragment = _registryonsteroids_group_functions_by_prefix();

  // Reverse sort the registry.
  krsort($registry);

  // Iterate over each registered hook.
  foreach ($registry as $theme_hook => &$info) {
    // The pattern to match.
    $pattern = isset($info['pattern']) ? $info['pattern'] : ($theme_hook . '__');

    // Only process hooks that have not explicitly "turned off" patterns.
    if (empty($pattern)) {
      continue;
    }

    // Iterate over each themes objects.
    // This is in order: the theme engine, the base theme(s), the current theme.
    foreach ($prefixes as $prefix) {
      _registryonsteroids_theme_find_processors(
        $functions_by_first_fragment,
        $registry,
        $info,
        $prefix,
        $theme_hook
      );

      // Ensure "theme path" is set.
      $info += array(
        'theme path' => drupal_dirname($theme->filename),
      );

      // Remove this member so each hook is independent and doesn't depend or
      // inherit of it's parent hook.
      // This prevent many situations where the preprocess/process calls orders
      // are not triggered at all or in the right order.
      unset($info['base hook']);
    }

    _registryonsteroids_theme_add_processors($theme_hook, $info, $prefixes_by_type);
  }

  // Reverse sort the registry.
  krsort($registry);

  // Registry optimization and includes fiddling.
  // This cannot be included in the previous loop as the previous loop
  // might create new members on the fly.
  foreach ($registry as $theme_hook => &$info) {
    // Make sure the includes member of each hook is completed with its
    // parent hook.
    list($original_hook,) = explode('__', $theme_hook);
    $info += array('includes' => array());
    $registry[$original_hook] += array('includes' => array());
    $info['includes'] = array_unique(
      array_merge(
        (array) $info['includes'],
        (array) $registry[$original_hook]['includes']
      )
    );

    // Optimize the registry.
    $info = array_filter($info);
  }

  // Sort the registry.
  ksort($registry);
}

/**
 * Find the processors callbacks.
 *
 * @param array $functions_by_first_fragment
 *   An functions from get_defined_functions(), grouped by first fragment.
 * @param array $registry
 *   The theme registry being processed.
 * @param array $info
 *   The current hook data.
 * @param string $prefix
 *   A prefix, e.g. a module name or theme name.
 * @param string $hook
 *   The theme hook being processed.
 */
function _registryonsteroids_theme_find_processors(array $functions_by_first_fragment, array &$registry, array &$info, $prefix, $hook) {
  // The pattern to match.
  $pattern = isset($info['pattern']) ? $info['pattern'] : ($hook . '__');

  foreach (_registryonsteroids_theme_processors_phases() as $phase) {
    // Find functions matching the specific theme and phase prefix.
    $prefix = $prefix . '_' . $phase;

    // Grep only the functions which are within the prefix group.
    list($first_prefix,) = explode('_', $prefix, 2);

    if (!isset($functions_by_first_fragment[$first_prefix])) {
      continue;
    }

    if (!$matches = preg_grep(
      '/^' . $prefix . '_' . $pattern . '/',
      $functions_by_first_fragment[$first_prefix]
    )) {
      continue;
    }

    foreach ($matches as $match) {
      // Determine the current theme implementation.
      $base_hook = drupal_substr($match, drupal_strlen($prefix) + 1);

      if (!isset($registry[$base_hook])) {
        $registry[$base_hook] = $info;
        $registry[$base_hook]['type'] = 'theme';
      }
    }
  }
}

/**
 * Add the processors to the hook.
 *
 * @param string $hook
 *   The current hook.
 * @param array $info
 *   The current hook data.
 * @param array $prefixes_data
 *   The prefixes.
 */
function _registryonsteroids_theme_add_processors($hook, array &$info = array(), array $prefixes_data = array()) {
  $hooks_stack = _registryonsteroids_hook_get_parents($hook);

  foreach (_registryonsteroids_theme_processors_phases() as $phase_key => $phase) {
    $callbacks = array();

    foreach ($prefixes_data as $prefixes) {
      foreach ($prefixes as $prefix) {
        $callbacks[] = $prefix . '_' . $phase;
        // This is the code that ensure preprocess/process inheritance.
        // TODO here detect how to set 'theme path'.
        array_map(
          function ($hook) use (&$callbacks, $phase, $prefix) {
            $callbacks[] = $prefix . '_' . $phase . '_' . $hook;
          },
          array_reverse($hooks_stack));
      }
    }

    // This is for dealing with modules implementing hook_theme_registry_alter.
    // By doing this, I make sure that no process callbacks that has been added
    // through this hook are lost.
    $info[$phase_key] = array_merge(
      $callbacks,
      array_diff($info[$phase_key], $callbacks)
    );

    // Ensure uniqueness of functions.
    $info[$phase_key] = array_unique($info[$phase_key]);

    // Filter out functions that does not exist.
    $info[$phase_key] = array_values(array_filter($info[$phase_key], '\function_exists'));

    // Sadly we remove preprocess and process for hooks that provides
    // a theme function. (like the date module with date_display_single).
    // We could have this in but some modules badly implementing
    // attributes handling would fail.
    if (isset($info['function'])) {
      $info[$phase_key] = array_filter(
        $info[$phase_key],
        function ($function) use ($phase, $hook) {
          return FALSE !== strpos($function, $phase . '_' . $hook);
        });
    }
  }
}

/**
 * Get processors name and machine name.
 *
 * Processor functions work in two distinct phases with the process
 * functions always being executed after the preprocess functions.
 *
 * @return array
 *   The processors names and machine names.
 */
function _registryonsteroids_theme_processors_phases() {
  return array(
    'preprocess functions' => 'preprocess',
    'process functions'    => 'process',
  );
}

/**
 * Compile a list of prefixes.
 *
 * The order of this is very important.
 *
 * @param object[] $base_themes
 *   The array of base themes.
 * @param object $theme
 *   The current theme.
 *
 * @see https://api.drupal.org/api/drupal/includes!theme.inc/function/theme/7.x
 *
 * @return string[][]
 *   The prefixes.
 *   Format: $[$prefix_type][$prefix] = $prefix
 */
function _registryonsteroids_theme_make_prefixes(array $base_themes, $theme) {
  return array(
    'template' => array(
      'template' => 'template',
    ),
    'module' => module_list(),
    'theme_engine' => array(
      $theme->engine => $theme->engine,
    ),
    'base_theme' => array_combine(
      array_keys($base_themes),
      array_keys($base_themes)
    ),
    'theme' => array(
      $theme->name => $theme->name,
    ),
  );
}

/**
 * @param string[] $user_functions
 * @param string[] $prefixes
 *   A whitelist of prefixes (module names, themes, etc).
 *
 * @return string[][][]
 *   Format: $[$hook][$phase][] = $function
 *   E.g. $['block']['preprocess'][] = 'system_preprocess_block'.
 */
function _registryonsteroids_group_functions_by_hook_and_phase_and_weight_with_inheritance(array $user_functions, array $prefixes) {

  $functions_by_hook_and_phase_and_weight = _registryonsteroids_group_functions_by_hook_and_phase_and_weight($user_functions, $prefixes);

  $functions_by_hook_and_phase_and_weight_extended = $functions_by_hook_and_phase_and_weight;
  foreach ($functions_by_hook_and_phase_and_weight as $hook => $functions_by_phase) {
    $functions_by_hook_and_phase_and_weight_extended[$hook . '__'] = TRUE;
    $functions_by_hook_and_phase_and_weight_extended[$hook . '__|'] = FALSE;
  }

  ksort($functions_by_hook_and_phase_and_weight_extended);

  $keys = array_keys($functions_by_hook_and_phase_and_weight_extended);

  $functionss_by_hook_and_phase_and_weight_with_inheritance = array();
  foreach ($keys as $i => $key) {
    if (TRUE === $functions_by_hook_and_phase_and_weight_extended[$key]) {
      $end_key = $key . '|';
      $parent_hook = $keys[$i - 1];
      $parent_hook_functions_by_phase_and_weight = $functions_by_hook_and_phase_and_weight_extended[$parent_hook];
      $affected_hooks = array($parent_hook);
      for ($j = $i + 1; $end_key !== $keys[$j]; ++$j) {
        $child_key = $keys[$j];
        if (FALSE === $functions_by_hook_and_phase_and_weight_extended[$child_key] || TRUE === $functions_by_hook_and_phase_and_weight_extended[$child_key]) {
          continue;
        }
        // Add child hook.
        $affected_hooks[] = $keys[$j];
      }
      foreach ($affected_hooks as $affected_hook) {
        if ('|' === substr($affected_hook, -1)) {
          $y = 5;
        }
        foreach ($parent_hook_functions_by_phase_and_weight as $phase => $functions_by_weight) {
          foreach ($functions_by_weight as $weight => $function) {
            $functionss_by_hook_and_phase_and_weight_with_inheritance[$affected_hook][$phase][$weight][] = $function;
          }
        }
      }
    }
  }

  $functionss_by_hook_and_phase_with_inheritance = array();
  foreach ($functionss_by_hook_and_phase_and_weight_with_inheritance as $hook => $functionss_by_phase_and_weight) {
    foreach ($functionss_by_phase_and_weight as $phase => $functionss_by_weight) {
      ksort($functionss_by_weight);
      $functionss_by_hook_and_phase_with_inheritance[$hook][$phase] = array_merge(...$functionss_by_weight);
    }
  }

  return $functionss_by_hook_and_phase_with_inheritance;
}

/**
 * @param string[] $user_functions
 * @param string[] $prefixes
 *   A whitelist of prefixes (module names, themes, etc).
 *
 * @return string[][][]
 *   Format: $[$hook][$phase][$weight] = $function
 *   E.g. $['block']['preprocess'][51] = 'system_preprocess_block'.
 */
function _registryonsteroids_group_functions_by_hook_and_phase_and_weight(array $user_functions, array $prefixes) {

  $functions_by_prefix_and_phase_filtered = _registryonsteroids_group_functions_by_prefix_and_phase_filtered(
    $user_functions,
    $prefixes);

  $functions_by_hook_and_phase_and_weight = array();
  $weight = 0;
  foreach ($functions_by_prefix_and_phase_filtered as $prefix => $functions_by_phase) {
    foreach ($functions_by_phase as $phase => $functions_by_hook) {
      foreach ($functions_by_hook as $hook => $function) {
        $functions_by_hook_and_phase_and_weight[$hook][$phase][$weight] = $function;
      }
    }
    ++$weight;
  }

  ksort($functions_by_hook_and_phase_and_weight);

  return $functions_by_hook_and_phase_and_weight;
}

/**
 * @param string[] $user_functions
 * @param string[] $prefixes
 *   A whitelist of prefixes (module names, themes, etc).
 *
 * @return string[][][]
 *   Format: $[$prefix][$phase][$themehook] = $function
 *   E.g. $['system']['preprocess']['block'] = 'system_preprocess_block'.
 */
function _registryonsteroids_group_functions_by_prefix_and_phase_filtered(array $user_functions, array $prefixes) {
  $functions_by_prefix_and_phase = _registryonsteroids_group_functions_by_prefix_and_phase(
    $user_functions);

  // Only keep functions with known prefix.
  $functions_by_prefix_and_phase_filtered = array();
  foreach ($prefixes as $prefix) {
    if (!isset($functions_by_prefix_and_phase[$prefix])) {
      continue;
    }
    $functions_by_prefix_and_phase_filtered[$prefix] = $functions_by_prefix_and_phase[$prefix];
  }

  return $functions_by_prefix_and_phase_filtered;
}

/**
 * @param string[] $user_functions
 *
 * @return string[][][]
 *   Format: $[$prefix][$phase][$themehook] = $function
 *   E.g. $['system']['preprocess']['block'] = 'system_preprocess_block'.
 */
function _registryonsteroids_group_functions_by_prefix_and_phase(array $user_functions) {

  $candidate_functions = preg_grep('/process_/', $user_functions);

  $functions_by_prefix_and_phase = [];
  foreach (array('preprocess', 'process') as $phase) {
    $needle = '_' . $phase . '_';
    $phase_functions = preg_grep('/_' . $phase . '_/', $candidate_functions);
    foreach ($phase_functions as $function) {
      $fragments = explode($needle, $function);
      if (!isset($fragments[1])) {
        // This should be unreachable code with the preg_grep() above.
        continue;
      }

      if (!isset($fragments[2])) {
        // This is the normal case with only one occurence of $needle.
        list($prefix, $hook) = $fragments;
        $functions_by_prefix_and_phase[$prefix][$phase][$hook] = $function;
        continue;
      }

      // This is a rare case with more than one occurence of $needle.
      // This doesn't have to be very fast, because it is rare.
      $prefix = array_shift($fragments);
      while (array() !== $fragments) {
        $hook = implode($needle, $fragments);
        $functions_by_prefix_and_phase[$prefix][$phase][$hook] = $function;
        $prefix .= $needle . array_shift($fragments);
      }
    }
  }

  return $functions_by_prefix_and_phase;
}

/**
 * Group all user functions by word before first underscore.
 *
 * @return array
 *   Functions grouped by the first prefix.
 */
function _registryonsteroids_group_functions_by_prefix() {
  $functions = get_defined_functions();
  $functions_by_first_fragment = array();

  // Splitting user defined functions into groups by the first prefix.
  foreach ($functions['user'] as $function) {
    list($first_fragment,) = explode('_', $function, 2);
    $functions_by_first_fragment[$first_fragment][] = $function;
  }

  return $functions_by_first_fragment;
}

/**
 * Gets the parents of a hook.
 *
 * @param string $hook
 *   The hook, e.g. 'aaa__bbb__ccc'.
 *
 * @return string[]
 *   The parent hooks, e.g. ['aaa__bbb__ccc', 'aaa__bbb', 'aaa'].
 */
function _registryonsteroids_hook_get_parents($hook) {
  $parents = array($hook);

  // @todo Combination of non-multibyte strrpos() and multibyte drupal_substr()?
  while ($pos = strrpos($hook, '__')) {
    // In theory, drupal_substr() can return FALSE. But not here. Promise.
    $parents[] = $hook = drupal_substr($hook, 0, $pos);
  }

  return $parents;
}
