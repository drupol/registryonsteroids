<?php

/**
 * Implements hook_module_implements_alter().
 *
 * @param array $implementations
 * @param string $hook
 */
function registryonsteroids_module_implements_alter(array &$implementations, $hook) {
  if ('theme_registry_alter' === $hook) {
    $group = $implementations['registryonsteroids'];
    unset($implementations['registryonsteroids']);
    $implementations['registryonsteroids'] = $group;
  }
}

/**
 * Implements hook_theme_registry_alter().
 *
 * @param array[] $registry
 */
function registryonsteroids_theme_registry_alter(array &$registry) {
  // Retrieve the active theme names.
  $themes = _registryonsteroids_get_base_themes($GLOBALS['theme_key'], TRUE);

  // Process registered hooks in the theme registry.
  _registryonsteroids_process_theme_registry($registry, $themes);

  // Get all themes.
  $all_themes = list_themes();

  // Compile an array of base themes object.
  $base_themes = _registryonsteroids_get_base_themes($all_themes[$GLOBALS['theme']]->name, TRUE);
  $base_themes = array_map(function ($theme) use ($all_themes) {
    return $all_themes[$theme];
  }, array_combine($base_themes, $base_themes));

  // Extract the current theme.
  $theme = array_pop($base_themes);

  // Apply Registry On Steroids sauce.
  _theme_post_process_registry($registry, $base_themes, $theme);
}

/**
 * Registry post process mechanism.
 *
 * @param array[] $registry
 *   The registry.
 * @param object[] $base_themes
 *   The base themes.
 * @param object $theme
 *   The current theme.
 */
function _theme_post_process_registry(array &$registry, array $base_themes, $theme) {
  $prefixes_data = _registryonsteroids_theme_make_prefixes($base_themes, $theme);
  $themes = array_merge($prefixes_data['module'], $prefixes_data['theme_engine'], $prefixes_data['base_theme'], $prefixes_data['theme']);
  $grouped_functions = drupal_group_functions_by_prefix();

  // Reverse sort the registry.
  krsort($registry);

  // Iterate over each registered hook.
  foreach ($registry as $hook => &$info) {
    // The pattern to match.
    $pattern = isset($info['pattern']) ? $info['pattern'] : ($hook . '__');

    // Only process hooks that have not explicitly "turned off" patterns.
    if (empty($pattern)) {
      continue;
    }

    // Iterate over each themes objects.
    // This is in order: the theme engine, the base theme(s), the current theme.
    foreach ($themes as $theme_hook) {
      _registryonsteroids_theme_find_processors($grouped_functions, $registry, $info, $theme_hook, $hook);

      // Ensure "theme path" is set.
      $info += array(
        'theme path' => drupal_dirname($theme->filename),
      );

      // Remove this member so each hook is independent and doesn't depend or
      // inherit of it's parent hook.
      // This prevent many situations where the preprocess/process calls orders
      // are not triggered at all or in the right order.
      unset($info['base hook']);
    }

    _registryonsteroids_theme_add_processors($hook, $info, $prefixes_data);
  }

  // Registry optimization and includes fiddling.
  // This cannot be included in the previous loop as the previous loop
  // might create new members on the fly.
  foreach ($registry as $hook => &$info) {
    // Make sure the includes member of each hook is completed with its
    // parent hook.
    list($original_hook,) = explode('__', $hook);
    $info += array('includes' => array());
    $registry[$original_hook] += array('includes' => array());
    $info['includes'] = array_unique(
      array_merge(
        (array) $info['includes'],
        (array) $registry[$original_hook]['includes']
      )
    );

    // Optimize the registry.
    $info = array_filter($info);
  }

  // Sort the registry.
  ksort($registry);
}

/**
 * Find the processors callbacks.
 *
 * @param array $grouped_functions
 *   An array of grouped functions.
 * @param array $cache
 *   The registry.
 * @param array $info
 *   The current hook data.
 * @param string $theme
 *   The current theme name.
 * @param string $hook
 *   The current hook.
 */
function _registryonsteroids_theme_find_processors(array $grouped_functions, array &$cache, array &$info, $theme, $hook) {
  // The pattern to match.
  $pattern = isset($info['pattern']) ? $info['pattern'] : ($hook . '__');

  foreach (_registryonsteroids_theme_processors_phases() as $phase) {
    // Find functions matching the specific theme and phase prefix.
    $prefix = $theme . '_' . $phase;

    // Grep only the functions which are within the prefix group.
    list($first_prefix,) = explode('_', $prefix, 2);
    if (isset($grouped_functions[$first_prefix]) && ($matches = preg_grep(
        '/^' . $prefix . '_' . $pattern . '/',
        $grouped_functions[$first_prefix]
      ))) {
      foreach ($matches as $match) {
        // Determine the current theme implementation.
        $base_hook = drupal_substr($match, drupal_strlen($prefix) + 1);

        if (!isset($cache[$base_hook])) {
          $cache[$base_hook] = $info;
          $cache[$base_hook]['type'] = 'theme';
        }
      }
    }
  }
}

/**
 * Add the processors to the hook.
 *
 * @param string $hook
 *   The current hook.
 * @param array $info
 *   The current hook data.
 * @param array $prefixes_data
 *   The prefixes.
 */
function _registryonsteroids_theme_add_processors($hook, array &$info = array(), array $prefixes_data = array()) {
  $hooks_stack = drupal_get_hook_parents($hook);

  foreach (_registryonsteroids_theme_processors_phases() as $phase_key => $phase) {
    $callbacks = array();

    foreach ($prefixes_data as $prefixes) {
      foreach ($prefixes as $prefix) {
        $callbacks[] = $prefix . '_' . $phase;
        // This is the code that ensure preprocess/process inheritance.
        // TODO here detect how to set 'theme path'.
        array_map(
          function ($hook) use (&$callbacks, $phase, $prefix) {
            $callbacks[] = $prefix . '_' . $phase . '_' . $hook;
          },
          array_reverse($hooks_stack));
      }
    }

    // This is for dealing with modules implementing hook_theme_registry_alter.
    // By doing this, I make sure that no process callbacks that has been added
    // through this hook are lost.
    $info[$phase_key] = array_merge(
      $callbacks,
      array_diff($info[$phase_key], $callbacks)
    );

    // Ensure uniqueness of functions.
    $info[$phase_key] = array_unique($info[$phase_key]);

    // Filter out functions that does not exist.
    $info[$phase_key] = array_filter($info[$phase_key], '\function_exists');

    // Sadly we remove preprocess and process for hooks that provides
    // a theme function. (like the date module with date_display_single).
    // We could have this in but some modules badly implementing
    // attributes handling would fail.
    if (isset($info['function'])) {
      $info[$phase_key] = array_filter(
        $info[$phase_key],
        function ($function) use ($phase, $hook) {
          return FALSE !== strpos($function, $phase . '_' . $hook);
        });
    }
  }
}

/**
 * Get processors name and machine name.
 *
 * Processor functions work in two distinct phases with the process
 * functions always being executed after the preprocess functions.
 *
 * @return array
 *   The processors names and machine names.
 */
function _registryonsteroids_theme_processors_phases() {
  return array(
    'preprocess functions' => 'preprocess',
    'process functions'    => 'process',
  );
}

/**
 * Compile a list of prefixes.
 *
 * The order of this is very important.
 *
 * @param object[] $base_themes
 *   The array of base themes.
 * @param object $theme
 *   The current theme.
 *
 * @see https://api.drupal.org/api/drupal/includes!theme.inc/function/theme/7.x
 *
 * @return array
 *   The prefixes.
 */
function _registryonsteroids_theme_make_prefixes(array $base_themes, $theme) {
  return array(
    'template' => array(
      'template' => 'template',
    ),
    'module' => module_list(),
    'theme_engine' => array(
      $theme->engine => $theme->engine,
    ),
    'base_theme' => array_combine(
      array_keys($base_themes),
      array_keys($base_themes)
    ),
    'theme' => array(
      $theme->name => $theme->name,
    ),
  );
}

/**
 * Group all user functions by word before first underscore.
 *
 * @return array
 *   Functions grouped by the first prefix.
 */
function drupal_group_functions_by_prefix() {
  $functions = get_defined_functions();
  $grouped_functions = array();

  // Splitting user defined functions into groups by the first prefix.
  foreach ($functions['user'] as $function) {
    list($first_prefix,) = explode('_', $function, 2);
    $grouped_functions[$first_prefix][] = $function;
  }

  return $grouped_functions;
}

/**
 * Gets the parents of a hook.
 *
 * @param string $hook
 *   The hook, e.g. 'aaa__bbb__ccc'.
 *
 * @return string[]
 *   The parent hooks, e.g. ['aaa__bbb__ccc', 'aaa__bbb', 'aaa'].
 */
function drupal_get_hook_parents($hook) {
  $parents = array($hook);

  // @todo Combination of non-multibyte strrpos() and multibyte drupal_substr()?
  while ($pos = strrpos($hook, '__')) {
    /** @noinspection CallableParameterUseCaseInTypeContextInspection */
    // In theory, drupal_substr() can return FALSE. But not here. Promise.
    $parents[] = $hook = drupal_substr($hook, 0, $pos);
  }

  return $parents;
}

/**
 * Processes registered hooks in the theme registry against list of themes.
 *
 * Discovers and fills missing elements in the theme registry. This is similar
 * to _theme_process_registry(), however severely modified.
 *
 * All additions or modifications must live in `./templates`, relative to the
 * base theme or sub-theme's base folder. These files can be organized in any
 * order using sub-folders as it searches recursively.
 *
 * Adds or modifies the following theme hook keys:
 *  - `includes`: When a variables file `*.vars.php` is found.
 *  - `includes`: When a function file `*.func.php` is found.
 *  - `function`: When a specific theme hook function override is found.
 *  - `template`: When a template file `*.tpl.php` is found in. Note, if both
 *    a function and a template are defined, a template implementation will
 *    always be used and the `function` will be unset.
 *  - `path`: When a template file `*.tpl.php` is found.
 *  - `preprocess functions`: When a specific theme hook suggestion function
 *    `hook_preprocess_HOOK__SUGGESTION` is found.
 *  - `process functions` When a specific theme hook suggestion function
 *    `hook_process_HOOK__SUGGESTION` is found.
 *
 * @param array[] $registry
 *   The theme registry array, passed by reference.
 * @param string[] $themes
 *   Machine names of the themes to process.
 *
 * @see registryonsteroids_theme_registry_alter()
 * @see _theme_process_registry()
 * @see _theme_build_registry()
 */
function _registryonsteroids_process_theme_registry(array &$registry, array $themes) {
  // Processor functions work in two distinct phases with the process
  // functions always being executed after the preprocess functions.
  $variable_process_phases = _registryonsteroids_theme_processors_phases();

  // Iterate over each theme passed.
  foreach ($themes as $theme) {
    // Get the theme's base path.
    $path = drupal_get_path('theme', $theme);
    $regexp = '/\.component\.inc$/';
    // Find theme function overrides.
    foreach (drupal_system_listing($regexp, $path . '/templates', 'name', 0) as $name => $file) {
      // Strip off the extension.
      if (($pos = strpos($name, '.')) !== FALSE) {
        $name = drupal_substr($name, 0, $pos);
      }

      // Transform "-" in file names to "_" to match theme hook naming scheme.
      $hook = str_replace('-', '_', $name);

      // File to be included by core's theme function when a theme hook is
      // invoked.
      if (isset($registry[$hook])) {
        $registry[$hook] += array(
          'includes' => array(),
        );
        $registry[$hook] += array_fill_keys(
          array_keys($variable_process_phases),
          array()
        );

        // Include the file now so functions can be discovered below.
        include_once DRUPAL_ROOT . '/' . $file->uri;

        if (!in_array($file->uri, $registry[$hook]['includes'], TRUE)) {
          $registry[$hook]['includes'][] = $file->uri;
        }
      }
    }

    // Process core's normal functionality.
    _theme_process_registry($registry, $theme, $GLOBALS['theme_key'] === $theme ? 'theme' : 'base_theme', $theme, $path);

    // Find necessary templates in the theme.
    $registry = drupal_array_merge_deep($registry, drupal_find_theme_templates($registry, '.tpl.php', $path));

    // Iterate over each registered hook.
    foreach ($registry as $hook => $info) {
      // Remove function callbacks if a template was found.
      if (isset($info['function'], $info['template'])) {
        unset($registry[$hook]['function']);
      }

      // Correct template theme paths.
      if (!isset($info['theme path'])) {
        $registry[$hook]['theme path'] = $path;
      }

      // Correct the type that is implementing this override.
      $registry[$hook]['type'] = $GLOBALS['theme_path'] === $registry[$hook]['theme path'] ? 'theme' : 'base_theme';

      $registry[$hook] += array_fill_keys(
        array_keys($variable_process_phases),
        array()
      );

      // Sort the phase functions.
      // @see https://www.drupal.org/node/2098551
      foreach ($variable_process_phases as $phase_key => $phase) {
        _registryonsteroids_registry_sort_phase_functions($registry[$hook][$phase_key], $hook, $phase, $themes);
      }
    }
  }
}

/**
 * Ensures the phase functions are invoked in the correct order.
 *
 * @param array $functions
 *   The phase functions to iterate over.
 * @param string $hook
 *   The current hook being processed.
 * @param string $phase
 *   The current phase being processed.
 * @param array $themes
 *   An indexed array of current themes.
 *
 * @see https://www.drupal.org/node/2098551
 */
function _registryonsteroids_registry_sort_phase_functions(array &$functions, $hook, $phase, array $themes) {
  // Immediately return if there is nothing to sort.
  if (count($functions) < 2) {
    return;
  }

  // Create an associative array of theme functions to ensure sort order.
  $theme_functions = array_fill_keys($themes, array());

  // Iterate over all the themes.
  foreach ($themes as $theme) {
    // Only add the function to the array of theme functions if it currently
    // exists in the $functions array.
    $function = $theme . '_' . $phase . '_' . $hook;
    $key = array_search($function, $functions, TRUE);
    if ($key !== FALSE) {
      // Save the theme function to be added later, but sorted.
      $theme_functions[$theme][] = $function;

      // Remove it from the current $functions array.
      unset($functions[$key]);
    }
  }

  // Iterate over all the captured theme functions and place them back into
  // the phase functions array.
  foreach ($theme_functions as $array) {
    $functions = array_merge($functions, $array);
  }
}

/**
 * Returns a list of base themes for active or provided theme.
 *
 * @param string $theme_key
 *   The machine name of the theme to find base themes for.
 * @param bool $include_theme_key
 *   Whether to append the returned list with $theme_key.
 *
 * @return array
 *   An indexed array of base themes.
 */
function _registryonsteroids_get_base_themes($theme_key, $include_theme_key = FALSE) {
  static $themes;

  if (!isset($themes[$theme_key])) {
    $themes[$theme_key] = array_unique(
      array_filter(
        (array) registryonsteroids_get_theme_info($theme_key, 'base theme')));
  }

  if ($include_theme_key) {
    $themes[$theme_key][] = $theme_key;
  }

  return array_unique($themes[$theme_key]);
}

/**
 * @param string $theme_key
 *   Name of the theme to start with.
 *
 * @return object[]|false
 *   Hierarchy of base theme objects, with order as specified in $root_first, or
 *   FALSE, if the theme itself or any of its ancestors are missing.
 *   Format:
 *   [
 *     'THEMENAME' => $theme,
 *     'PARENT_NAME' => $parent_theme,
 *     [..]
 *     'ROOT_NAME' => $root_theme,
 *   ]
 */
function _registryonsteroids_theme_get_ancestors($theme_key) {
  /**
   * @var object[][] $hierarchies_objects
   *   Format:
   *   $['THEMENAME'] = [
   *     'THEMENAME' => $theme,
   *     'PARENT_NAME' => $parent_theme,
   *     [..]
   *     'ROOT_NAME' => $root_theme,
   *   ]
   */
  static $hierarchies_objects = array();

  return isset($hierarchies_objects[$theme_key])
    ? $hierarchies_objects[$theme_key]
    : $hierarchies_objects[$theme_key] = _registryonsteroids_theme_collect_ancestors(
      $theme_key,
      list_themes());
}

/**
 * @param string $theme_key
 *   Name of the theme to start with.
 * @param object[] $known_themes
 *   The result of list_themes()
 *   This is passed as a parameter to make testing easier.
 *
 * @return object[]|false
 *   Hierarchy of base theme objects, starting with the theme itself.
 *   E.g. ['mytheme' => $my_theme, 'zen' => $zen]
 *   FALSE, if the theme itself or any of its ancestors is not in $known_themes.
 */
function _registryonsteroids_theme_collect_ancestors($theme_key, array $known_themes) {

  if (!isset($known_themes[$theme_key]->info)) {
    // The theme does not exist.
    return FALSE;
  }

  $hierarchy_objects = array();

  while (TRUE) {
    if (!isset($known_themes[$theme_key]->info)) {
      // The hierarchy contains an unknown theme name.
      return FALSE;
    }
    $hierarchy_objects[$theme_key] = $theme = $known_themes[$theme_key];
    $info = $theme->info;
    if (empty($info['base theme'])) {
      // Bottom of the hierarchy is here.
      break;
    }
    $theme_key = $info['base theme'];
  }

  return $hierarchy_objects;
}

/**
 * Return information from the .info file of a theme (and possible base themes).
 *
 * @param string $theme_key
 *   The machine name of the theme.
 * @param string $key
 *   The key name of the item to return from the .info file. This value can
 *   include "][" to automatically attempt to traverse any arrays.
 * @param bool $base_themes
 *   Recursively search base themes, defaults to TRUE.
 *
 * @return string|array|false
 *   A string or array depending on the type of value and if a base theme also
 *   contains the same $key, FALSE if no $key is found.
 */
function registryonsteroids_get_theme_info($theme_key = NULL, $key = NULL, $base_themes = TRUE) {

  // If no $theme_key is given, use the current theme if we can determine it.
  if (!isset($theme_key)) {
    if (empty($GLOBALS['theme_key'])) {
      return FALSE;
    }
    $theme_key = $GLOBALS['theme_key'];
  }

  if (!$theme_key) {
    return FALSE;
  }

  $themes = list_themes();
  if (empty($themes[$theme_key])) {
    return FALSE;
  }

  $theme = $themes[$theme_key];

  if (!$key) {
    // If no info $key was specified, just return the entire info array.
    return $theme->info;
  }

  $value = FALSE;
  // Recursively add base theme values.
  if ($base_themes && isset($theme->base_themes)) {
    foreach (array_keys($theme->base_themes) as $base_theme) {
      $value = registryonsteroids_get_theme_info($base_theme, $key);
    }
  }

  $info = $theme->info;
  // Allow array traversal.
  $keys = explode('][', $key);
  foreach ($keys as $parent) {
    if (isset($info[$parent])) {
      $info = $info[$parent];
    }
    else {
      $info = FALSE;
    }
  }

  if (is_array($value)) {
    if (!empty($info)) {
      if (!is_array($info)) {
        $info = array($info);
      }
      $value = drupal_array_merge_deep($value, $info);
    }
  }
  else {
    if (!empty($info)) {
      if (empty($value)) {
        $value = $info;
      }
      else {
        $value = array($value);

        if (!is_array($info)) {
          $info = array($info);
        }

        $value = drupal_array_merge_deep($value, $info);
      }
    }
  }

  return $value;
}
